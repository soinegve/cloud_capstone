# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: myfeeds
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: '2'



plugins:
  - serverless-iam-roles-per-function
  # - serverless-reqvalidator-plugin
  # - serverless-aws-documentation

provider:
  name: aws
  runtime: java8
  lambdaHashingVersion: 20201221



  # httpApi:
  #   authorizers:
  #     customAuthorizer:
  #       type: request
  #       functionName: auth

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}


  tracing:
    lambda: true
    apiGateway: true


  environment: 
    POSTS_TABLE : PostsTableV2-${self:provider.stage}
    FOLLOWS_TABLE : FollowsTable-${self:provider.stage}
    IMAGES_S3_BUCKET: images-myfeeds-${self:provider.stage}


# custom:
#   documentation:
#     api:
#       info:
#         version: v0.0.1
#         title: My Feeds
#         description: serverless app
#     models:
#       - name: publish
#         contentType: application/json
#         schema: ${file(src/main/schemas/follow.json)}

# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
package:
  artifact: target/hello-dev.jar


functions:

  auth:
    handler: com.myfeeds.AuthHanlder


  follow:
    handler: com.myfeeds.FollowHandler
    events:
      - http:
          path: /follow
          method: post
          cors: true
          authorizer: auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.FOLLOWS_TABLE}

  
  publish:
    handler: com.myfeeds.PublishHandler
    events:
      - http:
          path: /publish
          method: post
          cors: true
          authorizer: auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.POSTS_TABLE}


    
  getpresigned: 
    handler: com.myfeeds.GetPresignedUrlhHandler
    events:
      - http:
          path: /getpresignedurl
          method: get
          cors: true
          authorizer: auth

      
  getfeeds:
    handler: com.myfeeds.GetFeedsHandler
    events:
      - http:
          path: /getfeeds
          method: get
          cors: true
          authorizer: auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.POSTS_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Query
        
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.FOLLOWS_TABLE}



#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
resources:
  Resources:


    # RequestValidator:
    #   Type: AWS::ApiGateway::RequestValidator
    #   Properties:
    #     Name: 'request-body-validator'
    #     RestApiId:
    #       Ref: ApiGatewayRestApi
    #     ValidateRequestBody: true
    #     ValidateRequestParameters: false

    PostsDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties: 
        AttributeDefinitions:
           - AttributeName: postId
             AttributeType: S
           - AttributeName: userId
             AttributeType: S           
        KeySchema:
           - AttributeName: userId
             KeyType: HASH
           - AttributeName: postId
             KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.POSTS_TABLE}


    FolllowsDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties: 
        AttributeDefinitions:
           - AttributeName: followerId
             AttributeType: S
           - AttributeName: followeeId
             AttributeType: S           
        KeySchema:
           - AttributeName: followerId
             KeyType: HASH
           - AttributeName: followeeId
             KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.FOLLOWS_TABLE}

    AttachmentsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.IMAGES_S3_BUCKET}
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000

    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadFroGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: 'arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*'
        Bucket: !Ref AttachmentsBucket
